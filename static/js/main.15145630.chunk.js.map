{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","userList","users","sortOrder","handleSort","data","newSort","sort","a","b","nameA","toUpperCase","nameB","newSortOrder","setState","handleSortID","className","type","placeholder","aria-label","scope","onClick","this","map","user","key","id","first","last","gender","email","phone","src","picture","medium","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ijIA2GeA,E,4MAtGbC,MAAQ,CACNC,SAAUC,EACVC,UAAW,I,EAGbC,WAAa,SAACC,GACZ,IAAMC,EAAU,EAAKN,MAAMC,SAASM,MAAK,SAACC,EAAGC,GAC3C,IAAIC,EAAQF,EAAEH,GAAMM,cAChBC,EAAQH,EAAEJ,GAAMM,cAClB,MAA6B,QAAzB,EAAKX,MAAMG,UACTO,EAAQE,GACF,EAENF,EAAQE,EACH,EAEF,EAEHF,EAAQE,EACH,EAELF,EAAQE,GACF,EAEH,KAGPC,EAAwC,QAAzB,EAAKb,MAAMG,UAAsB,MAAQ,MAC9D,EAAKW,SAAS,CAAEb,SAAUK,EAASH,UAAWU,K,EAGhDE,aAAe,SAACV,GACd,IAAMC,EAAU,EAAKN,MAAMC,SAASM,MAAK,SAACC,EAAGC,GACzC,MAA6B,QAAzB,EAAKT,MAAMG,UACNK,EAAEH,GAAQI,EAAEJ,GAEZI,EAAEJ,GAAQG,EAAEH,MAGnBQ,EAAwC,QAAzB,EAAKb,MAAMG,UAAsB,MAAQ,MAC9D,EAAKW,SAAS,CAAEb,SAAUK,EAASH,UAAWU,K,uDAGtC,IAAD,OACP,OACE,oCACA,yBAAKG,UAAU,8BACf,wBAAIA,UAAU,gBAAd,gBACE,0BAAMA,UAAU,eACd,2BAAOA,UAAU,uBAAuBC,KAAK,OAAOC,YAAY,SAASC,aAAW,WACpF,4BAAQH,UAAU,wCAAlB,YAGF,2BAAOA,UAAU,+CACf,+BACE,wBAAIA,UAAU,cACZ,wBAAII,MAAM,MAAMC,QAAS,kBAAM,EAAKN,aAAa,QAAjD,WAGA,wBAAIK,MAAM,MAAMC,QAAS,kBAAM,EAAKjB,WAAW,WAA/C,cAGA,wBAAIgB,MAAM,MAAMC,QAAS,kBAAM,EAAKjB,WAAW,UAA/C,aAGA,wBAAIgB,MAAM,MAAMC,QAAS,kBAAM,EAAKjB,WAAW,YAA/C,UAGA,wBAAIgB,MAAM,MAAMC,QAAS,kBAAM,EAAKjB,WAAW,WAA/C,UAGA,wBAAIgB,MAAM,MAAMC,QAAS,kBAAM,EAAKjB,WAAW,WAA/C,SAGA,wBAAIgB,MAAM,OAAV,WAGJ,+BACGE,KAAKtB,MAAMC,SAASsB,KAAI,SAACC,GAAD,OACvB,wBAAIC,IAAKD,EAAKE,IACZ,wBAAIN,MAAM,OAAOI,EAAKE,IACtB,4BAAKF,EAAKG,OACV,4BAAKH,EAAKI,MACV,4BAAKJ,EAAKK,QACV,4BAAKL,EAAKM,OACV,4BAAKN,EAAKO,OACV,4BACE,yBACEC,IAAKR,EAAKS,QAAQC,OAClBC,IAAKX,EAAKG,MACVX,UAAU,kD,GA3FZoB,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.15145630.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport users from \"./Users.json\";\n\nclass App extends React.Component {\n  state = {\n    userList: users,\n    sortOrder: \"\",\n  };\n\n  handleSort = (data) => {\n    const newSort = this.state.userList.sort((a, b) => {\n      var nameA = a[data].toUpperCase();\n      var nameB = b[data].toUpperCase();\n        if (this.state.sortOrder !== \"des\") {\n          if (nameA < nameB) {\n            return -1;\n          }\n          if (nameA > nameB) {\n            return 1;\n          }\n          return 0;\n        } else {\n          if (nameA < nameB) {\n            return 1;\n          }\n          if (nameA > nameB) {\n            return -1;\n          }\n          return 0;\n        }\n      });\n    const newSortOrder = this.state.sortOrder === \"des\" ? \"asc\" : \"des\";\n    this.setState({ userList: newSort, sortOrder: newSortOrder });\n  };\n\n  handleSortID = (data) => {\n    const newSort = this.state.userList.sort((a, b) => {\n        if (this.state.sortOrder !== \"des\") {\n          return a[data] - b[data];\n        } else {\n          return b[data] - a[data];\n        }\n      });\n    const newSortOrder = this.state.sortOrder === \"des\" ? \"asc\" : \"des\";\n    this.setState({ userList: newSort, sortOrder: newSortOrder });\n  };\n\n  render() {\n    return (\n      <>\n      <nav className=\"navbar navbar-dark bg-dark\">\n      <h1 className=\"text-success\">User Manager</h1>\n        <form className=\"form-inline\">\n          <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\"/>\n          <button className=\"btn btn-outline-success my-2 my-sm-0\" >Search</button>\n        </form>\n      </nav>\n        <table className=\"table table-hover table-dark table-bordered\">\n          <thead>\n            <tr className=\"bg-success\">\n              <th scope=\"col\" onClick={() => this.handleSortID(\"id\")}>\n                User ID\n              </th>\n              <th scope=\"col\" onClick={() => this.handleSort(\"first\")}>\n                First Name\n              </th>\n              <th scope=\"col\" onClick={() => this.handleSort(\"last\")}>\n                Last Name\n              </th>\n              <th scope=\"col\" onClick={() => this.handleSort(\"gender\")}>\n                Gender\n              </th>\n              <th scope=\"col\" onClick={() => this.handleSort(\"email\")}>\n                E-Mail\n              </th>\n              <th scope=\"col\" onClick={() => this.handleSort(\"phone\")}>\n                Phone\n              </th>\n              <th scope=\"col\">Photo</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.userList.map((user) => (\n              <tr key={user.id}>\n                <th scope=\"row\">{user.id}</th>\n                <td>{user.first}</td>\n                <td>{user.last}</td>\n                <td>{user.gender}</td>\n                <td>{user.email}</td>\n                <td>{user.phone}</td>\n                <td>\n                  <img\n                    src={user.picture.medium}\n                    alt={user.first}\n                    className=\"rounded img-fluid image-thumbnail\"\n                  />\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}